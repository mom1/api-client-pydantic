[tool.poetry]
name = "api-client-pydantic"
version = "2.2.0"
description = "API Client extension for validate and transform requests / responses using pydantic."
authors = ["MaxST <mstolpasov@gmail.com>"]
license = "MIT"
repository = 'https://github.com/mom1/api-client-pydantic'
homepage = 'https://github.com/mom1/api-client-pydantic'
keywords = ['api-client', 'api-client-extension']
readme = 'README.md'
classifiers = [
    'Development Status :: 5 - Production/Stable',
    'Environment :: Web Environment',
    'Intended Audience :: Developers',
    'License :: OSI Approved :: MIT License',
    'Operating System :: OS Independent',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3.7',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Topic :: Internet :: WWW/HTTP :: Dynamic Content',
]
include = ['AUTHORS']
packages = [
    { include = 'apiclient_pydantic' },
]

[tool.poetry.dependencies]
python = "^3.7"
api-client = ">1.2.1"
pydantic = "^1.7,<2.0"

[tool.poetry.dev-dependencies]
# tests
coverage = "^6.5"
pytest = "^7.1"
pytest-cov = "^3.0"
pytest-asyncio = "^0.19"
# formating
black = {version = "^22.8", extras = ["d"]}
isort = "^5.10"
# linting
flake8 = "^4.0"
flake8-broken-line = "^0.6"
flake8-bugbear = "^22.9"
flake8-builtins = "^1.5"
flake8-comprehensions = "^3.10"
flake8-eradicate = "^1.4"
flake8-quotes = "^3.3"
flake8-pytest-style = "^1.6"
flake8-tidy-imports = "^4.8"
pep8-naming = "^0.13"
mccabe = "^0.6"
mypy = "^0.982"
types-setuptools = "^65.4"
types-toml = "^0.10"
# debug
ipdb = "^0.13"
# checks
safety = "^2.2"
pre-commit = "^2.20"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.isort]
# isort configuration:
# https://pycqa.github.io/isort/docs/configuration/options.html
profile = "black"
line_length = 120
combine_as_imports = true

[tool.black]
# Black configuration:
# https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#command-line-options
line-length = 120
skip-string-normalization = true
target-version = ['py37', 'py38', 'py39']
include = '\.pyi?$'

[tool.mypy]
# https://mypy.readthedocs.io/en/latest/config_file.html#using-a-pyproject-toml-file
pretty = true
show_traceback = true
color_output = true

ignore_missing_imports = true
strict_optional = true
disallow_incomplete_defs = true

allow_redefinition = false
implicit_reexport = false
show_column_numbers = true
show_error_codes = true
show_error_context = true
strict_equality = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.coverage.run]
# Coverage configuration:
# https://coverage.readthedocs.io/en/latest/config.html
# https://coverage.readthedocs.io/en/latest/config.html#run
branch = true
source = ["apiclient_pydantic"]
omit = ["tests", ".github"]

[tool.coverage.report]
# https://coverage.readthedocs.io/en/latest/config.html#report
fail_under = 100
show_missing = true
exclude_lines =[
  "pragma: no cover",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
]

[tool.pytest.ini_options]
# pytest configuration:
# https://docs.pytest.org/en/stable/customize.html
python_files = ["tests.py", "test_*.py", "*_tests.py"]

asyncio_mode = 'auto'
markers = ["asyncio"]

# Directories that are not visited by pytest collector:
norecursedirs = [
  "*.egg",
  ".eggs",
  "dist",
  "build",
  "docs",
  ".tox",
  ".git",
  "__pycache__",
]
addopts =[
  "-v",
  "--strict-markers",
  "--strict-config",
  "--tb=short",
  "--cov=apiclient_pydantic",
  "--cov-report=term-missing:skip-covered",
  "--cov-report=html",
  "--no-cov-on-fail",
]
filterwarnings = ["ignore:A private pytest class or function was used.:_pytest.warning_types.PytestDeprecationWarning"]
