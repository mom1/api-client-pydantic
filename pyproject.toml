[tool.poetry]
name = "api-client-pydantic"
version = "0.0.0"
description = "API Client extension for validate and transform requests / responses using pydantic."
authors = ["MaxST <mstolpasov@gmail.com>"]
license = "MIT"
repository = 'https://github.com/mom1/api-client-pydantic'
homepage = 'https://github.com/mom1/api-client-pydantic'
keywords = ['api-client', 'api-client-extension']
readme = 'README.md'
classifiers = [
    'Development Status :: 5 - Production/Stable',
    'Environment :: Web Environment',
    'Intended Audience :: Developers',
    'License :: OSI Approved :: MIT License',
    'Operating System :: OS Independent',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3.7',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Topic :: Internet :: WWW/HTTP :: Dynamic Content',
]
include = ['AUTHORS']
packages = [
    { include = 'apiclient_pydantic' },
]

[tool.poetry.dependencies]
python = "^3.7"
api-client = ">1.2.1"
pydantic = "^1.7"

[tool.poetry.dev-dependencies]
# tests
pytest = "^6.2"
pytest-cov = "^3.0"
pytest-env = "^0.6"
requests-mock = "^1.9"
vcrpy = "^4.1"
# formating
yapf = "^0.31"
isort = "^5.10"
# linting
flake8 = "^4.0"
flake8-broken-line = "^0.4"
flake8-bugbear = "^21.9"
flake8-builtins = "^1.5"
flake8-coding = "^1.3"
flake8-commas = "^2.1"
flake8-comprehensions = "^3.7"
flake8-eradicate = "^1.1"
flake8-quotes = "^3.3"
pep8-naming = "^0.12"
mccabe = "^0.6"
# changelog
gitchangelog = "^3.0"
emoji = "^1.5"
chevron = "^0.14"
# debug
ipdb = "^0.13"
safety = "^1.10"
pre-commit = "^2.15.0"

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
pattern = "^v?(?P<base>\\d+\\.\\d+\\.\\d+)(-?((?P<stage>[a-zA-Z]+)\\.?(?P<revision>\\d+)?))?$"

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry.core.masonry.api"

[tool.isort]
# isort configuration:
# https://github.com/timothycrosley/isort/wiki/isort-Settings
profile = "django"
line_length = 99
balanced_wrapping = true
indent = 4
use_parentheses = true
default_section = "FIRSTPARTY"
lines_after_imports = 2
skip_glob="**/migrations/*.py"

[tool.yapf]
# yapf configuration:
# https://github.com/google/yapf#formatting-style
based_on_style = "pep8"
column_limit = 119
i18n_comment = "noqa"
blank_lines_between_top_level_imports_and_variables = 2

[tool.coverage.run]
# Coverage configuration:
# https://coverage.readthedocs.io/en/latest/config.html
# https://coverage.readthedocs.io/en/latest/config.html#run
source = ["apiclient_pydantic_generator"]
omit = ["tests"]

[tool.coverage.report]
# https://coverage.readthedocs.io/en/latest/config.html#report
exclude_lines =[
  "pragma: no cover",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
]

[tool.pytest.ini_options]
# pytest configuration:
# https://docs.pytest.org/en/stable/customize.html
python_files = ["tests.py", "test_*.py", "*_tests.py"]

# Directories that are not visited by pytest collector:
norecursedirs = [
  "*.egg",
  ".eggs",
  "dist",
  "build",
  "docs",
  ".tox",
  ".git",
  "__pycache__",
]
addopts =[
  "-v",
  "--strict-markers",
  "--strict-config",
  "--tb=short",
  "--cov=apiclient_pydantic",
  "--cov-report=term-missing:skip-covered",
  "--cov-report=html",
  "--no-cov-on-fail",
]
filterwarnings = ["ignore:A private pytest class or function was used.:_pytest.warning_types.PytestDeprecationWarning"]
